/**
 * JS генераторы, yield/next
 */

// ------------------------------------------------------------

/**
 * Генераторы в JavaScript — это функции, которые позволяют создавать итераторы с внутренним состоянием,
 * позволяя выполнять пошаговую генерацию значений и даже реализовывать кооперативную многозадачность.
 *
 * Механика:
 * - Генератор определяется через function*, а вызов такой функции возвращает объект-итератор ("генератор").
 * - Выполнение кода в генераторе можно приостанавливать и возобновлять оператором yield.
 * - next() продолжает исполнение генератора до следующего yield, возвращая объект вида { value, done }.
 * - yield передаёт результат наружу и, опционально, принимает значение извне (через следующий next(value)).
 */

// 1. Простой пример механики (например, для создания уникальных идентификаторов)
function* counterGenerator() {
  let i = 0;
  while (i < 3) {
    yield i++;
  }
}

const gen = counterGenerator();
console.log(gen.next()); // { value: 0, done: false }
console.log(gen.next()); // { value: 1, done: false }
console.log(gen.next()); // { value: 2, done: false }
console.log(gen.next()); // { value: undefined, done: true }

// yield — “остановись здесь и верни это значение”
// next() — “продолжай с того места, где остановились”

/**
 * 2. Перебор данных по кускам
 * Когда есть длинный массив, но обрабатывать его нужно пошагово.
 * Например, постранично или “по 3 элемента” — например, для ленивой загрузки в UI.
 */
function* chunkArray(arr, chunkSize) {
  for (let i = 0; i < arr.length; i += chunkSize) {
    yield arr.slice(i, i + chunkSize);
  }
}

const arrGen = chunkArray([1, 2, 3, 4, 5, 6, 7], 3);

console.log(arrGen.next().value); // [1,2,3]
console.log(arrGen.next().value); // [4,5,6]
console.log(arrGen.next().value); // [7]

/**
 * Чем генераторы удобнее других решений?
 * - Обычные функции сразу возвращают всё значение, а генератор — только один “шаг”,
 *   что экономит память и удобно для “бесконечных” процессов.
 * - Генератор можно остановить и продолжить позже (удобно делать паузы или “размазывать” работу по времени).
 * - Генератор удобнее итераторов обычных тем, что вы пишете свой yield-алгоритм и можете добавлять свою логику.
 */
